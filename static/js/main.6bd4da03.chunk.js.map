{"version":3,"sources":["../../src/components/CustomCheckBox.jsx","../../src/components/CustomRadioGroup.jsx","../../src/components/CustomSelect.jsx","../../src/components/CustomTextInput.jsx","../../src/utils/getInputs.js","../../src/index.js","form.mock.js","App.js","index.js"],"names":["CustomCheckBox","props","field","useField","className","classes","type","label","name","component","CustomRadioGroup","options","map","opt","key","value","checked","desc","CustomSelect","htmlFor","id","CustomTextInput","generateValidations","console","log","schema","typeValue","Yup","validations","rule","isTrue","message","email","min","max","matches","oneOf","el","required","DynamicForm","formInputs","onSubmit","values","inputs","initialValues","validationsFields","validationSchema","shape","getInputs","noValidate","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bd4da03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomCheckBox = (props) => {\r\n    const [field] = useField(props)\r\n\r\n    return (\r\n        <label className={`label_check ${props.classes}`}>\r\n            <input type=\"checkbox\" {...field} {...props} />\r\n            <span>{props.label}</span>\r\n            <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n        </label>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport { useField, ErrorMessage } from 'formik';\r\n\r\nexport const CustomRadioGroup = ({ label, options, ...props }) => {\r\n  const [field] = useField(props)\r\n\r\n  return (\r\n    <div className={`radio-group ${props.classes}`}>\r\n      <b>{label}</b>\r\n      {\r\n        options.map(opt => (\r\n          <label key={opt.value}>\r\n            <input\r\n              {...field}\r\n              {...props}\r\n              type=\"radio\"\r\n              value={opt.value}\r\n              checked={opt.value === field.value}\r\n            />\r\n            {opt.desc}\r\n          </label>\r\n        ))\r\n      }\r\n      <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomSelect = ({ label, options, ...props }) => {\r\n  const [field] = useField(props)\r\n\r\n  return (\r\n    <div className={`select ${props.classes}`}>\r\n      <label htmlFor={props.name || props.id}> {label} </label>\r\n\r\n      <select {...field} {...props} >\r\n\r\n        <option value=\"\">--- Select ---</option>\r\n\r\n        {\r\n          options.map(({ desc, value }) => (\r\n            <option\r\n              value={value}\r\n              key={value}\r\n            >{desc}</option>\r\n          ))\r\n        }\r\n\r\n      </select>\r\n      <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n    </div>\r\n\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomTextInput = (props) => {\r\n    const [field] = useField(props)\r\n\r\n    return (\r\n        <div className={`input-box ${props.classes}`}>\r\n            <input {...field} {...props} />\r\n            <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n        </div>\r\n    )\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nconst generateValidations = (field) => {\r\n    console.log('>>', field.name);\r\n    let schema = field.typeValue === 'boolean' ? Yup.boolean() : Yup.string()\r\n\r\n    for (const rule of field.validations) {\r\n        console.log(rule.type);\r\n        switch (rule.type) {\r\n            case 'isTrue':\r\n                schema = schema.isTrue(rule.message)\r\n                break;\r\n            case 'isEmail':\r\n                schema = schema.email(rule.message)\r\n                break;\r\n            case 'minLength':\r\n                schema = schema.min(rule?.value, rule.message)\r\n                break;\r\n            case 'maxLength':\r\n                schema = schema.max(rule?.value, rule.message)\r\n                break;\r\n            case 'regex':\r\n                schema = schema.matches(rule?.value, rule.message)\r\n                break;\r\n            case 'match':\r\n                schema = schema.oneOf(\r\n                    rule?.value.map(el => Yup.ref(el)),\r\n                    rule.message)\r\n                break;\r\n            default:\r\n                schema = schema.required()\r\n                break;\r\n        }\r\n        console.log(schema);\r\n    }\r\n\r\n    console.log(field.name, schema);\r\n\r\n    return schema\r\n}\r\n\r\n// section: Form\r\nexport const getInputs = (inputs) => {\r\n\r\n    // initialValues: { [key: string]: any }\r\n    let initialValues = {};\r\n\r\n    // validationsFields: { [key: string]: any }\r\n    let validationsFields = {};\r\n\r\n    for (const field of inputs) {\r\n        initialValues[field.name] = field.value\r\n\r\n        if (!field.validations) continue;\r\n\r\n        const schema = generateValidations(field)\r\n        validationsFields[field.name] = schema\r\n    }\r\n\r\n    return {\r\n        validationSchema: Yup.object().shape({ ...validationsFields }),\r\n        initialValues\r\n    }\r\n};","import React from 'react'\n\nimport { Form, Formik } from 'formik'\n\nimport {\n  CustomCheckBox,\n  CustomRadioGroup,\n  CustomSelect,\n  CustomTextInput\n} from './components'\n\nimport { getInputs } from './utils'\n\nexport const DynamicForm = ({\n  formInputs,\n  onSubmit = (values) => console.log(values)\n}) => {\n  const { initialValues, validationSchema } = getInputs(formInputs)\n\n  console.log(validationSchema);\n\n  return <Formik initialValues={initialValues}\n    validationSchema={validationSchema}\n    onSubmit={onSubmit}\n  >\n    {\n      () => (\n        <Form noValidate>\n          {\n            formInputs.map(({ name, type, value, ...props }) => {\n              switch (type) {\n                case 'select':\n                  return <CustomSelect\n                    key={name}\n                    label={props?.label}\n                    name={name}\n                    options={props?.options}\n                    classes={props.class} />\n                case 'radio-group':\n                  return <CustomRadioGroup\n                    label={props?.label}\n                    name={name}\n                    options={props?.options}\n                    key={name}\n                    classes={props.class} />\n                case 'checkbox':\n                  return <CustomCheckBox\n                    label={props?.label}\n                    key={name}\n                    name={name}\n                    classes={props.class} />\n                default:\n                  return <CustomTextInput\n                    key={name}\n                    name={name}\n                    placeholder={props.placeholder}\n                    type={type}\n                    classes={props.class} />\n              }\n            })\n          }\n        </Form>\n      )\n    }\n\n  </Formik>\n}\n","export const formInputs = [\r\n    {\r\n        type: \"text\",\r\n        name: \"name\",\r\n        placeholder: \"Full Name\",\r\n        value: \"Daniel Gonzalez\",\r\n        validations: [\r\n            {\r\n                type: \"minLength\",\r\n                value: 3,\r\n                message: \"Min. 3 characters\",\r\n            },\r\n            {\r\n                type: \"required\",\r\n                message: \"Full Name is required\"\r\n            },\r\n        ],\r\n\r\n    },\r\n    {\r\n        type: \"email\",\r\n        name: \"email\",\r\n        placeholder: \"E-mail\",\r\n        value: \"\",\r\n        validations: [\r\n            {\r\n                type: \"isEmail\",\r\n                message: \"Email no valid\"\r\n            },\r\n            {\r\n                type: \"required\",\r\n                message: \"Email is required\"\r\n            }\r\n        ],\r\n\r\n    },\r\n    {\r\n        type: \"password\",\r\n        name: \"password\",\r\n        placeholder: \"Password\",\r\n        value: \"\",\r\n        validations: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Password is required\"\r\n            },\r\n            {\r\n                type: 'regex',\r\n                value: /^[A-Z]+$/,\r\n                message: 'Password must be all capital'\r\n            }\r\n        ],\r\n\r\n    },\r\n    {\r\n        type: \"password2\",\r\n        name: \"password2\",\r\n        placeholder: \"Repit Password\",\r\n        value: \"\",\r\n        validations: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Password 2 is required\"\r\n            }\r\n        ],\r\n\r\n    },\r\n    {\r\n        type: \"select\",\r\n        name: \"rol\",\r\n        label: \"Select an option: \",\r\n        value: \"\",\r\n        options: [\r\n            {\r\n                value: \"admin\",\r\n                desc: \"Admin\",\r\n            },\r\n            {\r\n                value: \"user\",\r\n                desc: \"User\"\r\n            },\r\n            {\r\n                value: \"super-admin\",\r\n                desc: \"Super Admin\"\r\n            }\r\n        ],\r\n        validations: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Rol is required\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        type: \"radio-group\",\r\n        name: \"gender\",\r\n        label: \"Gender: \",\r\n        value: \"\",\r\n        options: [\r\n            {\r\n                value: 'man',\r\n                desc: \"Man\"\r\n            },\r\n            {\r\n\r\n                value: \"woman\",\r\n                desc: \"Woman\"\r\n            },\r\n            {\r\n\r\n                value: \"other\",\r\n                desc: \"Other\"\r\n            },\r\n        ],\r\n        validations: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Gender is required\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        type: \"checkbox\",\r\n        name: \"terms\",\r\n        typeValue: \"boolean\",\r\n        label: \"Terms and Conditions\",\r\n        // class: \"input-reverse\",\r\n        value: false,\r\n        validations: [\r\n            {\r\n                type: \"isTrue\",\r\n                message: \"Accept the terms!\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        type: 'submit',\r\n        name: 'btn',\r\n        value: 'Submit'\r\n    }\r\n]","import React from 'react'\n\nimport { DynamicForm } from 'dynamic-forms'\nimport { formInputs } from './form.mock'\n\nconst App = () => {\n  return <DynamicForm\n    formInputs={formInputs}\n    onSubmit={(values) => console.log(values)}\n  />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}