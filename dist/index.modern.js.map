{"version":3,"file":"index.modern.js","sources":["../src/components/CustomCheckBox.jsx","../src/components/CustomRadioGroup.jsx","../src/components/CustomSelect.jsx","../src/components/CustomTextInput.jsx","../src/utils/validations.js","../src/utils/getInputs.js","../src/index.js"],"sourcesContent":["import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomCheckBox = (props) => {\r\n    const [field] = useField(props)\r\n\r\n    return (\r\n        <label className={`label_check ${props.classes}`}>\r\n            <input type=\"checkbox\" {...field} {...props} />\r\n            <span>{props.label}</span>\r\n            <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n        </label>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport { useField, ErrorMessage } from 'formik';\r\n\r\nexport const CustomRadioGroup = ({ label, options, ...props }) => {\r\n  const [field] = useField(props)\r\n\r\n  return (\r\n    <div className={`radio-group ${props.classes}`}>\r\n      <b>{label}</b>\r\n      {\r\n        options.map(opt => (\r\n          <label key={opt.value}>\r\n            <input\r\n              {...field}\r\n              {...props}\r\n              type=\"radio\"\r\n              value={opt.value}\r\n              checked={opt.value === field.value}\r\n            />\r\n            {opt.desc}\r\n          </label>\r\n        ))\r\n      }\r\n      <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomSelect = ({ label, options, ...props }) => {\r\n  const [field] = useField(props)\r\n\r\n  return (\r\n    <div className={`select ${props.classes}`}>\r\n      <label htmlFor={props.name || props.id}> {label} </label>\r\n\r\n      <select {...field} {...props} >\r\n\r\n        <option value=\"\">--- Select ---</option>\r\n\r\n        {\r\n          options.map(({ desc, value }) => (\r\n            <option\r\n              value={value}\r\n              key={value}\r\n            >{desc}</option>\r\n          ))\r\n        }\r\n\r\n      </select>\r\n      <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n    </div>\r\n\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { ErrorMessage, useField } from \"formik\"\r\n\r\nexport const CustomTextInput = (props) => {\r\n    const [field] = useField(props)\r\n\r\n    return (\r\n        <div className={`input-box ${props.classes}`}>\r\n            <input {...field} {...props} />\r\n            <ErrorMessage name={props.name} component=\"span\" className=\"error\" />\r\n        </div>\r\n    )\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const booleanValidations = (validations) => {\r\n    let schema = Yup.boolean().strict()\r\n\r\n    for (const rule of validations) {\r\n        switch (rule.type) {\r\n            case 'isTrue':\r\n                schema = schema.isTrue(rule.message)\r\n                break;\r\n            case 'isFalse':\r\n                schema = schema.isFalse(rule.message)\r\n                break;\r\n            default:\r\n                schema = schema.required(rule.message)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return schema\r\n}\r\n\r\nexport const numberValidations = (validations) => {\r\n    let schema = Yup.number().strict()\r\n\r\n    for (const rule of validations) {\r\n        switch (rule.type) {\r\n            case 'min':\r\n                schema = schema.min(rule?.value, rule.message)\r\n                break;\r\n            case 'max':\r\n                schema = schema.max(rule?.value, rule.message)\r\n                break;\r\n            case 'lessThan':\r\n                schema = schema.lessThan(rule?.value, rule.message)\r\n                break;\r\n            case 'moreThan':\r\n                schema = schema.moreThan(rule?.value, rule.message)\r\n                break;\r\n            case 'positive':\r\n                schema = schema.positive(rule.message)\r\n                break;\r\n            case 'negative':\r\n                schema = schema.negative(rule.message)\r\n                break;\r\n            case 'integer':\r\n                schema = schema.integer(rule.message)\r\n                break;\r\n            default:\r\n                schema = schema.required(rule.message)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return schema\r\n}\r\n\r\nexport const dateValidations = (validations) => {\r\n    let schema = Yup.date().strict()\r\n\r\n    for (const rule of validations) {\r\n        switch (rule.type) {\r\n            case 'min':\r\n                schema = schema.min(rule?.value, rule.message)\r\n                break;\r\n            case 'max':\r\n                schema = schema.max(rule?.value, rule.message)\r\n                break;\r\n            default:\r\n                schema = schema.required(rule.message)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return schema\r\n}\r\n\r\nexport const stringValidations = (validations) => {\r\n    let schema = Yup.string().strict()\r\n\r\n    for (const rule of validations) {\r\n        switch (rule.type) {\r\n            case 'isEmail':\r\n                schema = schema.email(rule.message)\r\n                break;\r\n            case 'isUrl':\r\n                schema = schema.url(rule.message)\r\n                break;\r\n            case 'isUuid':\r\n                schema = schema.uuid(rule.message)\r\n                break;\r\n            case 'lowercase':\r\n                schema = schema.lowercase(rule.message)\r\n                break;\r\n            case 'uppercase':\r\n                schema = schema.uppercase(rule.message)\r\n                break;\r\n            case 'minLength':\r\n                schema = schema.min(rule?.value, rule.message)\r\n                break;\r\n            case 'maxLength':\r\n                schema = schema.max(rule?.value, rule.message)\r\n                break;\r\n            case 'length':\r\n                schema = schema.length(rule?.value, rule.message)\r\n                break;\r\n            case 'regex':\r\n                schema = schema.matches(rule?.value, { excludeEmptyString: true, message: rule.message })\r\n                break;\r\n            default:\r\n                schema = schema.required(rule.message)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return schema\r\n}","import * as Yup from 'yup'\r\nimport * as Validations from './validations'\r\n\r\nconst generateValidations = (field) => {\r\n    let schema\r\n\r\n    switch (field.typeValue) {\r\n        case 'boolean':\r\n            return schema = Validations.booleanValidations(field.validations)\r\n        case 'number':\r\n            return schema = Validations.numberValidations(field.validations)\r\n        case 'date':\r\n            return schema = Validations.dateValidations(field.validations)\r\n        default:\r\n            return schema = Validations.stringValidations(field.validations)\r\n    }\r\n}\r\n\r\n// section: Form\r\nexport const getInputs = (inputs) => {\r\n\r\n    // initialValues: { [key: string]: any }\r\n    let initialValues = {};\r\n\r\n    // validationsFields: { [key: string]: any }\r\n    let validationsFields = {};\r\n\r\n    for (const field of inputs) {\r\n        initialValues[field.name] = field.value\r\n\r\n        if (!field.validations) continue;\r\n\r\n        const schema = generateValidations(field)\r\n        validationsFields[field.name] = schema\r\n    }\r\n\r\n    return {\r\n        validationSchema: Yup.object().shape({ ...validationsFields }),\r\n        initialValues\r\n    }\r\n};","import React from 'react'\n\nimport { Form, Formik } from 'formik'\n\nimport {\n  CustomCheckBox,\n  CustomRadioGroup,\n  CustomSelect,\n  CustomTextInput\n} from './components'\n\nimport { getInputs } from './utils'\n\nexport const DynamicForm = ({\n  formInputs,\n  onSubmit = (values) => console.log(values)\n}) => {\n  const { initialValues, validationSchema } = getInputs(formInputs)\n\n  return <Formik initialValues={initialValues}\n    validationSchema={validationSchema}\n    onSubmit={onSubmit}\n  >\n    {\n      () => (\n        <Form noValidate>\n          {\n            formInputs.map(({ name, type, value, ...props }) => {\n              switch (type) {\n                case 'select':\n                  return <CustomSelect\n                    key={name}\n                    label={props?.label}\n                    name={name}\n                    options={props?.options}\n                    classes={props.class} />\n                case 'radio-group':\n                  return <CustomRadioGroup\n                    label={props?.label}\n                    name={name}\n                    options={props?.options}\n                    key={name}\n                    classes={props.class} />\n                case 'checkbox':\n                  return <CustomCheckBox\n                    label={props?.label}\n                    key={name}\n                    name={name}\n                    classes={props.class} />\n                default:\n                  return <CustomTextInput\n                    key={name}\n                    name={name}\n                    placeholder={props.placeholder}\n                    type={type}\n                    classes={props.class} />\n              }\n            })\n          }\n        </Form>\n      )\n    }\n\n  </Formik>\n}\n"],"names":["CustomCheckBox","props","field","useField","classes","label","name","CustomRadioGroup","options","map","opt","value","desc","CustomSelect","id","CustomTextInput","booleanValidations","validations","schema","Yup","strict","rule","type","isTrue","message","isFalse","required","numberValidations","min","max","lessThan","moreThan","positive","negative","integer","dateValidations","stringValidations","email","url","uuid","lowercase","uppercase","length","matches","excludeEmptyString","generateValidations","typeValue","Validations","getInputs","inputs","initialValues","validationsFields","validationSchema","shape","DynamicForm","formInputs","onSubmit","values","console","log","class","placeholder"],"mappings":"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"}